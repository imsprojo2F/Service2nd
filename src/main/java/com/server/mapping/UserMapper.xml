<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.server.dao.UserMapper">
	<resultMap id="BaseResultMap" type="com.server.pojo.User">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="account" jdbcType="VARCHAR" property="account" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="type" jdbcType="INTEGER" property="type" />
		<result column="create_time" jdbcType="VARCHAR" property="createTime" />
	</resultMap>
	<sql id="Base_Column_List">
		id, account, password, type, create_time
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where id = #{id,jdbcType=INTEGER}
	</select>

	<select id="selectByAccount" parameterType="java.util.Map"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where account = #{account}
	</select>
	<select id="login" parameterType="java.util.Map" resultMap="BaseResultMap">
		select
		*
		from user
		where account = #{account} and password=#{password}
	</select>
	<select id="selectByPage" parameterType="java.util.Map"
		resultType="Map">
		select
		*
		from user
		where 1=1
		<if test="account != null">
			and account LIKE '${account}'
		</if>
		ORDER BY ${sidx} ${sord}
		LIMIT ${pageNow},${pageSize}
	</select>
	<select id="listAll" parameterType="java.util.Map" resultMap="BaseResultMap">
		select
		*
		from user
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByIds" parameterType="java.lang.String">
	<![CDATA[DELETE from user where id in]]>
		<foreach item="item" collection="array" open="(" separator=","
			close=")">
			#{item}
		</foreach>
	</delete>
	<insert id="insert" parameterType="com.server.pojo.User">
		insert into user (id, account, password,
		type, create_time)
		values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{type,jdbcType=INTEGER}, #{createTime,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.server.pojo.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="account != null">
				account,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="type != null">
				type,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="account != null">
				#{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				#{type,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				NOW(),
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.server.pojo.User">
		update user
		<set>
			<if test="account != null">
				account = #{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.server.pojo.User">
		update user
		set account = #{account,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		type = #{type,jdbcType=INTEGER},
		create_time = #{createTime,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>